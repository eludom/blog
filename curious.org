#+TITLE: Curious Musings
#+OPTIONS: num:nil toc:nil \n:nil
#+TODO: TODO(t) CANCELLED(c) |  WIP(w) PUBLISHED(p)
#+hugo_base_dir: .
#+hugo_auto_set_lastmod: %Y-%m-%d
#+MACRO instagram @@html:https://www.instagram.com/p/$1

:PROPERTIES:
:EXPORT_HUGO_SECTION:
:END:
* Content
** Blog
 :PROPERTIES:
  :EXPORT_HUGO_SECTION: Blog
  :END:

*** INTRO
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: Blog
  :EXPORT_FILE_NAME: _index
  :END:

The main technology section. Every project starts here, eventually branching off to its own category.

*** WIP Fixing GNU bash associative array insert speed :programming:gnu:linux:
:PROPERTIES:
    :EXPORT_HUGO_SECTION: Blog
    :EXPORT_FILE_NAME: 20200418
    :EXPORT_HUGO_PUBLISHDATE: 2020-04-18:
    :END:

Bash uses linear search to insert values in to associative arrays.
This is all well and good for small numbers of keys.   I was adding
millions[fn:1].    I went poking around the bash source code today
(2020-04-18) to confirm my suspicion and gauge the difficulty of
adding an option to do something more sensible.

#+hugo: more

Here the steps I took and where I might go if I get serious about
fixing the problem:

**** Get the source code


***** Find it
      - find the homepage :: A quick bit of googling lead to the homepage http://savannah.gnu.org/projects/bash/
      - use git :: For a minute it looked like GNU was still stuck in the bad old
        days of having to download a tarball and then apply a series
        of patches, but fortunately, it there is a git repo http://savannah.gnu.org/git/?group=bash
***** Download it
      #+begin_src bash :eval no
git clone https://git.savannah.gnu.org/git/bash.git
      #+end_src
***** Build it

      Bash follows a time honored build convention
      #+begin_src bash :results output :eval no
./configure
make
      #+end_src

***** Analyze it
      - I read the NEWS file for any indication that associative arrays
        has been worked on to speed up associative array
        insert/look-ups.  No indication that they had.
      - I checked the git commit logs, which appear to be meaningful
        after Bash-4.4 patch 19.  Nothing.
      - With judicious use of grep ("grep-find in Emacs") for
        "associative" and "hash_search" it turns out that associative
        array inserts (as all inserts) are done with use of the
        "hash_search" function in =hashlib.c=
      - has_insert() begins as follows:
#+begin_src C
/* Create an entry for STRING, in TABLE.  If the entry already
   exists, then return it (unless the HASH_NOSRCH flag is set). */
BUCKET_CONTENTS *
hash_insert (string, table, flags)
     char *string;
     HASH_TABLE *table;
     int flags;
{
  BUCKET_CONTENTS *item;
  int bucket;
  unsigned int hv;

  if (table == 0)
    table = hash_create (0);

  item = (flags & HASH_NOSRCH) ? (BUCKET_CONTENTS *)NULL
                               : hash_search (string, table, 0);
#+end_src
      - and there it is, the linear search walking the list in
        =hash_search()=
#+begin_src C
/* Return a pointer to the hashed item.  If the HASH_CREATE flag is passed,
   create a new hash table entry for STRING, otherwise return NULL. */
BUCKET_CONTENTS *
hash_search (string, table, flags)
     const char *string;
     HASH_TABLE *table;
     int flags;
{
  BUCKET_CONTENTS *list;
  int bucket;
  unsigned int hv;

  if (table == 0 || ((flags & HASH_CREATE) == 0 && HASH_ENTRIES (table) == 0))
    return (BUCKET_CONTENTS *)NULL;

  bucket = HASH_BUCKET (string, table, hv);

  for (list = table->bucket_array ? table->bucket_array[bucket] : 0; list; list = list->next)
    {
      /* This is the comparison function */
      if (hv == list->khash && STREQ (list->key, string))
        {
          list->times_found++;
          return (list);
        }
    }
#+end_src



***** Next steps
****** TODO Reach out to the maintainers
       see if they would even entertain the idea of a patch
****** TODO Look for appropriate in-memory hash insert/lookup functions
       - btrees ?
****** TODO Code it
****** TODO test it
****** TODO submit patch

*** TODO From CompuServe, UUNET, and the great beyond :history:internet:online:
   Perspectives on the growth of "online" communities/my experience

   - Adm3a terminals
   - Vax email
   - CompuServe
   - Usenet
   - CompuServe again
   - The web
   - UUNET

*** TODO Pull in my recent LinkedIn Posts
*** TODO Publish thoughts from my journal
*** TODO original building bash                    :unix:linux:bash:software:
* About George Jones
   :PROPERTIES:
   :EXPORT_HUGO_SECTION: About
   :EXPORT_FILE_NAME: _index
   :EXPORT_HUGO_LAYOUT: single
   :END:

   George Jones is a Christian, husband, father, technical security
   geek etc., backpacker, Latin, Classics, and Philosophy dabbler,
   Emacs Org Mode addict, Cincinnati Reds and Skyline Chili fan.  In
   something like that order.  He tries to combine his passions and
   has thus been know to write Latin entries in Appalachian Trail
   shelter log books ("Via longa sed vita brevis"), and write blog
   posts about the intersection of epistemology and computer security.
   You have a lot of time to think when hiking or stuck at home during
   a pandemic.  Maybe too much :-)

   Professionally George has made a living variously as a programmer,
   systems administrator, network security engineer, open source
   software developer, Internet Standards author (RFC3871), security
   researcher, conference chair (Flocon 2013, 2014), security
   analytics developer and data scientist.  He has been employed
   variously by CompuServe, UUNET, MITRE, Carnegie-Mellon/CERT, Amazon
   and Redjack.  See  https://www.linkedin.com/in/georgemjones/

   He can be reached via email as gmj at pobox dot com

* Curious Musings
:PROPERTIES:
   :EXPORT_HUGO_SECTION: curious
   :EXPORT_FILE_NAME: _index
   :EXPORT_HUGO_LAYOUT: single
   :END:

Curious Musings is a place I put up thoughts on life, family, work,
security, the outdoors, etc.   As someone who started work at
CompuServe, the original walled garden, I am sensitive to my content
remaining free and available.

Curious Musisings is created with [[https://gohugo.io/][Hugo Go]], a free open-source site
generator. It is designed and authored on a free Linux OS using [[https://www.gnu.org/software/emacs/][Emacs]]
[[https://orgmode.org/][org-mode]] and [[https://ox-hugo.scripter.co/][ox-hugo]].  Bandwidth is currently supplied free of charge
by Github.

I am grateful to Josh Rollins for his [[https://joshrollinswrites.com/][TAONAW]] blog which I used as a
model/too for learning Hugo and ox-hugo.  The source can be found
https://github.com/jarss/

** Footnotes

[fn:1] yes, there are many better tools for this job, but not in the constrained environment where this had to run.
